" ~/.vimrc
" Harrison Ku
" Original Author: Lisa McCutcheon
" April 6, 2018

" **************************************
" * VARIABLES
" **************************************
set nocompatible		" get rid of strict vi compatibility!
set nu				" line numbering on
set autoindent			" autoindent on
set noerrorbells		" bye bye bells :)
set modeline			" show what I'm doing
set showmode			" show the mode on the dedicated line
set nowrap			" no wrapping!
set ignorecase			" search without regards to case
set backspace=indent,eol,start	" backspace over everything
set fileformats=unix,dos,mac	" open files from mac/dos
set exrc			" open local config files
set nojoinspaces		" don't add white space when I don't tell you to
set ruler			" which line am I on?
set showmatch			" ensure Dyck language
set incsearch			" incremental searching
set nohlsearch			" meh
set bs=2			" fix backspacing in insert mode
set formatoptions+=r		" auto comments
set background=dark
set t_ut=			" disable background erase

" Expand tabs in C files to spaces
au BufRead,BufNewFile *.{c,h,java} set expandtab
au BufRead,BufNewFile *.{c,h,java} set shiftwidth=2
au BufRead,BufNewFile *.{c,h,java} set tabstop=2

" Do not expand tabs in assembly file.  Make them 8 chars wide.
au BufRead,BufNewFile *.s set noexpandtab
au BufRead,BufNewFile *.s set shiftwidth=8
au BufRead,BufNewFile *.s set tabstop=8

" Show syntax
syntax on

" Set colorscheme (scroll by using :colorscheme + Tab)
colorscheme industry

" For switching between many opened file by using ctrl+l or ctrl+h
map <C-J> :next <CR>
map <C-K> :prev <CR>

" Spelling toggle via F10 and F11
map <F10> <Esc>setlocal spell spelllang=en_us<CR>
map <F11> <Esc>setlocal nospell<CR>

" Limit lines to 80 characters
set colorcolumn=81		" highlight 80th column
match Error /\%81v.\+/		" highlight text over 80 chars
set textwidth=80		" wraps lines at 80 chars

" Auto file header insertion using F7 key
function FileHeading()
          let s:line=line(".")
          call setline (s:line,   "/*")
          call append  (s:line,   " * Filename: " .expand("%"))
          call append  (s:line+1, " * Author: TODO")
          call append  (s:line+2, " * Userid: TODO")
          call append  (s:line+3, " * Description: TODO")
          call append  (s:line+4, " * Date: " .strftime("%b %d %Y"))
          call append  (s:line+5, " * Sources of Help: TODO")
          call append  (s:line+6, " */")
          unlet s:line
endfunction
  
imap <F7> <ESC>mz:execute FileHeading()<CR>

" Auto function header insertion using F8 key
function FuncHeading()
          let s:line=line(".")
          call setline (s:line,   "/*")
          call append  (s:line,   " * Function Name: TODO")
          call append  (s:line+1, " * Function Prototype: TODO")
          call append  (s:line+2, " * Description: TODO")
          call append  (s:line+3, " * Parameters: TODO")
          call append  (s:line+4, " * Side Effects: TODO")
          call append  (s:line+5, " * Error Conditions: TODO")
	  call append  (s:line+6, " * Return Value: TODO")
          call append  (s:line+7, " */")
          unlet s:line
endfunction
  
imap <F8> <ESC>mz:execute FuncHeading()<CR>

" Auto assembly routine header using F9 key
function AssemblyHeading()
          let s:line=line(".")
          call setline (s:line,   "/*")
          call append  (s:line,   " * Function Name: TODO")
          call append  (s:line+1, " * Function Prototype: TODO")
          call append  (s:line+2, " * Description: TODO")
          call append  (s:line+3, " * Parameters: TODO")
          call append  (s:line+4, " * Side Effects: TODO")
          call append  (s:line+5, " * Error Conditions: TODO")
	  call append  (s:line+6, " * Return Value: TODO")
	  call append  (s:line+7, " * ")
	  call append  (s:line+8, " * Registers used: TODO")
	  call append  (s:line+9, " * 	<register> - <use> -- <description>")
	  call append  (s:line+10, " * ")
	  call append  (s:line+11, " * Local variables: TODO")
	  call append  (s:line+12, " * 	<name> - <fp offset> -- <description>")
          unlet s:line
endfunction
  
imap <F9> <ESC>mz:execute AssemblyHeading()<CR>

